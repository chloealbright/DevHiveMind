{
	"nodes":[
		{"id":"f395ab11333254a1","type":"text","text":"## Clarifying Question\n\n### Ask\nStart off with Funneling question starting with:\n##### open ended interrogative question like `What`\n- The focus of these question should be on the overall problem statement.\n- Next\n- Examples:\n\t- \n\nThen get specific maybe shifting focus to `given test cases`\n\n","x":-980,"y":-860,"width":680,"height":744},
		{"id":"8618a90a876b2a86","type":"text","text":"## Clarifying Question Answers \n\n\n\n\n\n","x":-994,"y":-40,"width":694,"height":860},
		{"id":"e15e52dfa9780b19","type":"text","text":"# Problem Identification Categories\n\n### What sub action is the problem asking \nLike is it asking for you to search through some given input or is searching even necessary.\n\nIs it asking you to sort or do you just need to do some access action for a specific value\n\n## Data Structure Selection\n\n### Access/Read\n> This is basically conditional logic but within conditional logic contains **Access actions**\n\n-\n\n\n### Search\n- Use a Map to improve search run time using `get` or `has` method which is used a lot in **READS/Conditional logic** \n- Set is also an option if you dont care about removing duplicates\n\n\n### Updates(Deletion/Insertion/Reassignments)\n> Typically Occurs inside a loop but can happen outside as well depends on you logic\n- \n\n\n\n## Built in Function Selection\n\n- Math \n- String \n- Number","x":-120,"y":-1040,"width":940,"height":1100},
		{"id":"6d17c0a1ccccc8e4","x":-22,"y":-1304,"width":802,"height":144,"type":"text","text":"## Break out To Decision Flow "},
		{"id":"5db5529395743754","x":-1740,"y":-1160,"width":680,"height":1180,"type":"text","text":"The order in which you ask these types of questions may depend on the context of the coding challenge and the specific goals you want to achieve. However, here's a general suggested order:\n\n> Closed ended question can be asked after any of these question types\n\n1. **Open Questions:** Start with open-ended questions to gauge the candidate's understanding and approach to the coding challenge.\n\n2. **Recall and Process Questions:** Assess their knowledge recall and understanding of the problem. This helps ensure they grasp the basics before diving deeper.\n\n3. **Divergent Questions:** Encourage open discussion and opinion sharing. This can provide insights into their problem-solving thought process.\n\n4. **Probing Questions:** Use follow-up questions to understand perspectives and encourage deeper reasoning. This helps in evaluating the depth of their understanding and thought process.\n\n5. **Comparison Questions:** Ask higher-order questions to compare different aspects of their solution or approach. This assesses their ability to critically analyze and make informed comparisons.\n\n6. **Evaluation Questions:** Move to questions requiring value judgments or anticipation of future events. This assesses their ability to think critically about the consequences of their choices.\n\n7. **Inference Questions:** Pose questions demanding inductive or deductive reasoning. This helps evaluate their ability to draw logical conclusions from the information provided.\n\n8. **Application Questions:** Assess their ability to apply concepts in a new context, mirroring real-world scenarios.\n\n9. **Affective Questions:** End with questions that seek to understand their emotional responses to the challenge. This can provide insights into their overall engagement and satisfaction.\n\nRemember that the goal is not only to assess technical skills but also problem-solving, critical thinking, and communication skills. Adjust the order based on the nature of the coding challenge and the specific qualities you want to emphasize in your evaluation."},
		{"id":"bb311c395d14aedf","type":"text","text":"## Step by Step Approach Breakdown\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\nInitialize/Store \nsome variable or data structure\n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n> Things like search and read\nare common things to break\nout into helper functions\n\n","x":1552,"y":-830,"width":600,"height":1220},
		{"id":"4b518e46e9d6564e","x":945,"y":257,"width":455,"height":463,"type":"text","text":"## Identifying Algo Patterns "},
		{"id":"48a9e4550eadd0a8","x":895,"y":-1004,"width":555,"height":1080,"type":"text","text":"## Algo Points of focus \n- Given Input\n- Given Input Variation(Test Cases and Edge Cases) \n- Defined Primitive type Variables(Boolean, String, Integer, etc..) \n- Defined Data structure being leveraged in approach\n- Search like where is you looping logic focused on the given input or Data structure. \n\t- Are you using a Binary Search or Linear Search\n\t- Is the Structure Traversable like an array where you can loop from the beginning, middle if you are using binary search logic or at the end.\n\t- Do is it matter that the structure is Traversable meaning if you don't care about the order you loop in can it at least be itterable like for example a set which can't be traversed or has access actions.\n\t- Is the given input and test cases pre sorted, partially sorted, or unsorted.\n\t- Are searching through a range of values or partial range.\n"},
		{"id":"a0e725495f717a94","x":2360,"y":-660,"width":960,"height":794,"type":"text","text":"## Coding\n\n\nDoes the value of a variable need to persist outside of a loop if so declared a variable inside of the loop if you want to keep it there and you don't care about the value persistence otherwise declare outside and reference it inside\n\n\n## Coding Style\n\nTalk using Imperative or Declarative \n\nLinear or Binary Search \n\nIterative looping or Recursive looping\n\nCan structure be traversed meaning a specific order like with array or not like a set which needs a iterable value like an array or string passed into its constructor or a iterable passed to its `add` method then you get duplicates removed and you get values returned in the order they were inserted in the set."},
		{"id":"f131b9d80bafd9aa","x":1321,"y":-1826,"width":463,"height":594,"type":"text","text":"## Type of Conditions\n\n\nOverlapping"},
		{"id":"77e85144bef13843","type":"text","text":"## Given Input Attribute ","x":-20,"y":240,"width":680,"height":744}
	],
	"edges":[
		{"id":"f5b9dc08cce9d0d6","fromNode":"f395ab11333254a1","fromSide":"right","toNode":"77e85144bef13843","toSide":"left"}
	]
}