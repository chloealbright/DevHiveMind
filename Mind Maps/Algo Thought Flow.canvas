{
	"nodes":[
		{"id":"f395ab11333254a1","type":"text","text":"## Clarifying Question\n\n### Ask\nStart off with Funneling question starting with:\n#### Open ended interrogative pronoun question like `What`\n- The focus of these question should be on the overall problem statement then get specific.\n- Ask about the problem Constraints(boundaries or conditions).\n- Then get specific shifting focus of questions to the given `test cases` and then `edge cases`.\n\n##### Examples:\n- Ask  **what if**  or you can rephrase it saying `\"can I assume this or that …\"` \n\n\n### Then Interrogative adverb questions like\n\n#### Why - identify the root overall or at specific scopes \n- Can be asked in different ways `\"Is there any reason this wouldn't have... \"`\n- \n#### Which - Identify the specific components or requirements of the problem. \n- Which elements are crucial to address?\n- \n#### How - identify the steps  \n- This is used after you collect information as define steps you will order them appropriately\n- \n\n#### When -  Consider any time-related constraints or dependencies in the problem. \n- When should certain actions or conditions occur?\n- \n\n#### Where - Clarify the context or scope of the problem. \n- Where does the solution need to be applied or optimized?\n\n\n#### Closed ended more specific even just yes or no\n\n\n#### Ask question Verifying your understanding of the problem ","x":-2081,"y":-2544,"width":700,"height":1615,"color":"4"},
		{"id":"77e85144bef13843","type":"text","text":"## Given Input Attribute \n\n**_Number_**(has ascii values) numbers can apply to a lot of diff parms below.\n\n**Numeric values can also be represented with ASCII values\n- For an array of numbers or numbers, consider attributes like:\n  - Natural numbers (positive numbers)\n  - Whole numbers (Natural and zero)\n  - Integers (Whole and negative numbers)\n  - Rational numbers (Integers, Decimal, Fractions )\n  - Min/Max values, zero, and decimal aspects.\n  - Evaluate range, partial range, order, and decimal floor/ceiling.\n\n- String(**_can iter in array like 2d array for letters_** )\n    - if string of various characters think ascii a little don't default to it  \n    - If limited to a specific set of characters, what happens when some are not in the range \n    - Alphabeting order  \n    - **Empty string or spaces in string** \n    - **Unique or Specific Characters** \n    - **Unicode string (special characters)** \n- Check for emptiness, spaces, and length (odd/even).\n\t- Examine substrings, Unicode values, and special characters.\n\t- Consider unique characters, fixed-length strings, and letter casing.\n\t- Account for null as an argument.\n\t- Use built-in functions cautiously; explore algorithm patterns.\n\t- For arrays of characters, analyze length, range, empty spaces, and duplicates.\n\t- Mind loop direction and duplicates; use sets for efficiency.\n\t- Don't forget the alphabet (26 characters)\n\t- Be cautious with assumptions about ASCII values avoid defaulting to ASCII values.\n\n\n- Array of Primitive Types\n    \n    - if array of nums check  particular range or DS length, order, type of nums like `Natural num(pos and 0)`, `Integers(Natural and neg)`,  `Rational num(decimal, fraction)`, `Min/Max` , `symmetry of relation(even/odd)`, decimal floor/ceiling, or decimal place \n    - Think about what places to iterate from like the beginning, middle or end point\n    - When dealing with large ranges think about breaking things down to lower sub ranges to reduce iteration \n    - if array of strings think built in string/array functions else array of characters you can think more about algo patterns then string methods ask about empty space string length range of characters or special characters \n\n- Boundary analysis: -1 and 1 after the array length\n- Incrementing the entire length of the array\n- Handling nested arrays with a single loop\n- Min/max considerations\n- Splitting an array using binary search\n  ```javascript\n  const length = array.length;\n  const middle = Math.floor(length / 2);\n  const left = array.slice(0, middle);\n  const right = array.slice(middle);\n  ```\n\n## Starting Point and End point\n- Do a Boundary Analysis Analyze the current value in relation to the values before and after.\n- Evaluate whether you need to traverse every element, which ties back to understanding the problem.\n- Considerations for values contained in a specific range\n- Length or calculation value\n- Reducing iteration by breaking down large ranges\n- Decrementing arrays from the end index to the start (array.Length to 0)\n\n## Fixed Length Data\n\nDealing with data of fixed length, whether it's a matrix or an array, may require approaches like Merge Interval. This can apply to numbers or when handling ASCII values for letters.\n\n- Focus your conditional logic on the fixed length, which is critical for solving these problems.\n\n- Consider how these boundary cases may overlap or relate to each other.\n\n- Object\n    - Advanced Objects/Array Data Structures like Linked List, Tree, Graph, Heap, Sets, etc ….\n\n\n## Sort Algorithm Boundary Cases\n- Potential scenarios where sorting algorithms may fail:\n  - Empty input\n  - Input with only one element\n  - Very long input\n  - Garbage inside the collection to be sorted\n  - Null input\n  - Duplicate elements\n  - Collection with all elements equal\n  - Odd/even length input","x":-2071,"y":-704,"width":680,"height":1484},
		{"id":"e15e52dfa9780b19","type":"text","text":"# Problem Identification Categories\n\n### What sub action is the problem asking \nLike is it asking for you to search through some given input or is searching even necessary in the scope of the problem.\n\nIs it asking you to sort or do you just need to do some access action for a specific value\n\nYou can also be asked to a question where the solution may include implementing a cyclic sort.\n\n## Data Structure Selection\n\n### Access/Read\n> Read is basically conditional logic but within conditional logic contains **Access actions** or some times a function call like **map.has()** that returns a boolean to compare to like if a map has a specific value.\n\n#### Linear Data Structures\n- Array's have a average `Constant time` complexity.\n- Linked List or Doubly Linked List have a average `Linear time` complexity.\n- Queues and Stacks runtime end up being dependent on how you implement them weather you use a Array or some type of Linked List those structures will adopt the runtime of those structures used to build them. \n\n#### Non Linear Data Structures\n- Sets don't have a way to directly access values.\n- Binary Search Tree has a average `Logarithmic Time`\n- Map has a average `Constant time` complexity when it comes to access.\n- Graphs have access action but runtime complexity is different from general run time because it memory related.  \n\n### Search\n#### Linear Data Structures\n- Array has a average `Linear Time`.\n- Linked List or Doubly Linked List have a average `Linear time` complexity.\n#### Non Linear Data Structures\n- Set is also an option if you don't care about removing duplicates but has `Constant time` complexity.\n- Binary Search Tree `Logarithmic Time`\n- Use a Map to improve search run time using `get` or `has` method which is used a lot in **READS/Conditional logic** `Constant time` complexity.\n\n\n### Updates(Deletion/Insertion/Reassignments)\n> Typically Occurs inside a loop but can happen outside as well depends on you logic\n#### Insertion\nused more in comparison to deletion but depends on approach \n##### Linear Data Structures\n- Array has a average `Linear Time` complexity.\n- Linked List have a average `Constant time` complexity.\n- Queues and Stacks runtime end up being dependent on how you implement them weather you use a Array or some type of Linked List those structures will adopt the runtime of those structures used to build them.  \n\n##### Non Linear Data Structures\n- Set has `Constant time` complexity.\n- Binary Search Tree `Logarithmic Time`\n- Map has `Constant time` complexity.\n\n#### Deletion\narray length can be reassigned to delete values at the end. \n##### Linear Data Structures\n- Array has a average `Linear Time` complexity.\n- Linked List have a average `Constant time` complexity.\n- Queues and Stacks runtime end up being dependent on how you implement them weather you use a Array or some type of Linked List those structures will adopt the runtime of those structures used to build them.  \n\n##### Non Linear Data Structures\n- Set has `Constant time` complexity.\n- Binary Search Tree `Logarithmic Time`\n- Map has `Constant time` complexity.\n\n## Sort Selection\nIn javascript you can use built sort of sake of time but mention one of the other sorts as a sort that makes sense to use if discussing sorting.\n\n\n### Small inputs\n- QuickSort Linearithmic Time\n### Large inputs\n- Merge Sort Linearithmic Time\n\n\n## Built in Function Selection\n- Array\n\t- fill\n\t- flat\n\t- join \n\t- reverse\n\t- shift \n\t- unshift\n\t- splice\n\t- toString\n\t- map\n\t- sort\n- Math \n\t- Like Min or Max examine the question in terms of language being used or if it makes sense to include in a solution.\n\t- Floor and Ceiling if dealing with min and max heap \n\t- Floor for Binary search or modified Binary search mid point\n\t- Round, Absolute, Power, Sqrt for power base \n- Object\n\t- Object.keys()\n\t- Object.value()\n\t- entries\n\t- assign \n#### Primitives \n- String \n\t- charCodeAt takes in letter and returns ascii num\n\t- to revers of that is fromCharCode\n\t- includes\n\t- trim methods\n\t- `slice()` method which extracts a section of a string and returns a new string. It takes two parameters:\n\t- to lower and upper\n\t- replace or search or match all take in regex stay away from not as experienced also the longer the regex to higher the runtime \n- Number\n\t- toFixed for decimal \n\t- parseInt returns whole num","x":-1321,"y":-2320,"width":940,"height":3960},
		{"id":"6d17c0a1ccccc8e4","type":"text","text":"## Break out To Decision Flow ","x":-1321,"y":-2544,"width":802,"height":144},
		{"id":"a9c895e4792dae6a","type":"text","text":"## Step by Step Approach Breakdown Copy\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n> Things like search and read\nare common things to break\nout into helper functions\n\n","x":-5001,"y":-1753,"width":600,"height":1220},
		{"id":"f5d202cf4a9ae182","type":"file","file":"Algorithms & Data Structures/Algorithms/Approach Pivot.md","x":-4001,"y":-2477,"width":1040,"height":2637},
		{"id":"8618a90a876b2a86","type":"text","text":"## Clarifying Question Answers \n\n\n\n\n\n","x":-2835,"y":-820,"width":694,"height":860},
		{"id":"5db5529395743754","type":"text","text":"The order in which you ask these types of questions may depend on the context of the coding challenge and the specific goals you want to achieve. However, here's a general suggested order:\n\n> Closed ended question also known as yes or no questions can be asked after any of these question types\n\n1. **Open Questions:** Start with open-ended questions to gauge the candidate's understanding and approach to the coding challenge.\n\n2. **Divergent Questions:** Encourage open discussion and opinion sharing. This can provide insights into their problem-solving thought process.\n\n3. **Probing Questions:** Use follow-up questions to understand perspectives and encourage deeper reasoning. This helps in evaluating the depth of their understanding and thought process.\n\n4. **Comparison Questions:** Ask higher-order questions to compare different aspects of their solution or approach. This assesses their ability to critically analyze and make informed comparisons.\n\n5. **Recall and Process Questions:** Assess their knowledge recall and understanding of the problem. This helps ensure they grasp the basics before diving deeper.\n\n","x":-2821,"y":-2472,"width":680,"height":766},
		{"id":"bb311c395d14aedf","type":"text","text":"# Define Approach then Convert to\n\n## Step by Step Approach Breakdown\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\nBreak(stops loop) or continue(skip iteration) \n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n> Things like search and read\nare common things to break\nout into helper functions\n\nType of Conditions\nTermination condition meaning condition with a return\n\n\n### Discrete Math truth table\nCustom truth table potential use case for identifying overlapping conditions and if they make sense. \n\n🔼 represent `AND` operator  \n🔽 represent `OR` operator\n✅ represent definitely\n🚫 represent not likely \n🤷 represents possibly depends on requirements \n\n\n\n| Truth  Table | 1 | 2 | 3 | 1🔽2 | 1🔼3 |\n| ---- | ---- | ---- | ---- | ---- | ---- |\n| 1. new cus | T | T | T | F |  |\n| 2. repeat cus | T | T | F | T |  |\n| 3. coupon cus | T | F | T |  |  |\n| **result** | 🚫 | 🚫 | ✅ | 🤷 | 🤷 |\n\n\n\n","x":1140,"y":-2400,"width":820,"height":1760,"color":"2"},
		{"id":"a0e725495f717a94","type":"text","text":"## Coding Stage\n\n\nDoes the value of a variable need to persist outside of a loop if so declared a variable inside of the loop if you want to keep it there and you don't care about the value persistence otherwise declare outside and reference it inside\n\n\n### Talking point\n- I typically would create a pure function that performs a [[Shallow Copy and Deep Copy(clone) |deep copy]] and avoids unintended side affects around the given parameters like shallow copy, but for the sake of time we can keep this function impure in order to focus on the task at hand.\n\n- When dealing with overlapping conditions, I like to use [[Conditional Logic and Operators#Short circuit evaluation |Short circuit evaluation]]. So if I'm dealing with conditions using the `&&` operator, I prioritize the statement most likely to fail as the first condition. In contrast, for conditions using the `||` operator, I opt for placing the statement that is most likely to be true as the first condition.\n\n- So I will be writing my code in more of a Imperative style instead of Declarative style which can be time consuming in terms of identifying runtime complexity. \n\n- Iterative looping or Recursive looping\n\n\nalso closure when doing dynamic programming\n\n\n\nmaybe compare things to real life example or some thing and talk about that\n\n","x":2100,"y":-1825,"width":960,"height":1080,"color":"1"},
		{"id":"6c1c19ff856feafe","type":"text","text":"## Big O Scale\n> Dominate terms or runtime close to excellent takes president over lower terms for overall algorithm run time.\n\n### Exe Time                     Start ⬇\n\nO(1) Constant Time\nO(log n) Logarithmic Time **Binary Search**\nO(n) Linear Time          **Linear Search**\nO(n log(n)) Linearithmic Time - **SORTS**              \nO(n^2) Quadratic\nO(2^n) Exponential  **Nested Loop** or **Recursion**\nO(n^3) Cubic **Triple Loop** \nO(n^k) Polynomial Time **Recursion**\nO(n!) Factorial Time\n#### Worst Time                End\n\nSo if you have algorithm that is Linear time meaning it's doing some type of search and you implement a sort be looping in the function then the overall runtime improves to Logarithmic Time.\n\n","x":2180,"y":-2658,"width":638,"height":677},
		{"type":"text","text":"<center>\n  <h4 style=\"font-size: 120px; -webkit-text-stroke: 1px green; -webkit-text-fill-color: transparent;\">Algorithm Decision Tree </h4>\n</center>\n\n","id":"ceef3c82fa6add09","x":-2071,"y":-3920,"width":2620,"height":500,"color":"6"},
		{"id":"48a9e4550eadd0a8","type":"text","text":"## Algo Points of focus \n- Given Constraints\n- Given Input\n- Given Input Variation(Test Cases and Edge Cases) \n- Defined Primitive type Variables(Boolean, String, Integer, etc..) \n- If multiple inputs/params focus on the one that directly influence the problem and has the most constraints then shift focus to the others examine the relationship between params. \n- Defined Data structure being leveraged in approach\n- Search like where is you looping logic focused on the given input or a Data structure. \n\t- Are you using a Binary Search or Linear Search\n\t- Is the Structure Traversable like an array where you can loop from the beginning, middle if you are using binary search logic or at the end.\n\t- Do is it matter that the structure is Traversable meaning if you don't care about the order you loop in can it at least be itterable like for example a set which can't be traversed and doesn't have access actions.\n\t- Is the given input and test cases pre sorted, partially sorted, or unsorted.\n\t- Do care about preserving the default order of given input.\n\t- Are you searching through a range of values or partial range.\n\t- binary search can be focused on array index as well if you don't care about searching based on array element at the index\n\n\nCan structure be traversed meaning a specific order like with array or not like a set which needs a iterable value like an array or string passed into its constructor or a iterable passed to its `add` method then you get duplicates removed and you get values returned in the order they were inserted in the set.\n\n\n\n","x":-40,"y":-2472,"width":625,"height":1080},
		{"id":"05da1a875057f4b2","type":"text","text":"## Problem Statement phrasing used to Identify potential pattern","x":-3633,"y":320,"width":558,"height":160},
		{"id":"40c6470878d75dab","type":"text","text":"## Array Sorting Algorithms\n\n|Algorithm|Time Complexity|   |   |Space Complexity|\n|---|---|---|---|---|\n||Best|Average|Worst|Worst|\n|[Quicksort](http://en.wikipedia.org/wiki/Quicksort)|`Ω(n log(n))`|`Θ(n log(n))`|`O(n^2)`|`O(log(n))`|\n|[Mergesort](http://en.wikipedia.org/wiki/Merge_sort)|`Ω(n log(n))`|`Θ(n log(n))`|`O(n log(n))`|`O(n)`|\n|[Timsort](http://en.wikipedia.org/wiki/Timsort)|`Ω(n)`|`Θ(n log(n))`|`O(n log(n))`|`O(n)`|\n|[Heapsort](http://en.wikipedia.org/wiki/Heapsort)|`Ω(n log(n))`|`Θ(n log(n))`|`O(n log(n))`|`O(1)`|\n|[Bubble Sort](http://en.wikipedia.org/wiki/Bubble_sort)|`Ω(n)`|`Θ(n^2)`|`O(n^2)`|`O(1)`|\n|[Insertion Sort](http://en.wikipedia.org/wiki/Insertion_sort)|`Ω(n)`|`Θ(n^2)`|`O(n^2)`|`O(1)`|\n|[Selection Sort](http://en.wikipedia.org/wiki/Selection_sort)|`Ω(n^2)`|`Θ(n^2)`|`O(n^2)`|`O(1)`|\n|[Tree Sort](https://en.wikipedia.org/wiki/Tree_sort)|`Ω(n log(n))`|`Θ(n log(n))`|`O(n^2)`|`O(n)`|\n|[Shell Sort](http://en.wikipedia.org/wiki/Shellsort)|`Ω(n log(n))`|`Θ(n(log(n))^2)`|`O(n(log(n))^2)`|`O(1)`|\n|[Bucket Sort](http://en.wikipedia.org/wiki/Bucket_sort \"Only for integers. k is a number of buckets\")|`Ω(n+k)`|`Θ(n+k)`|`O(n^2)`|`O(n)`|\n|[Radix Sort](http://en.wikipedia.org/wiki/Radix_sort \"Constant number of digits 'k'\")|`Ω(nk)`|`Θ(nk)`|`O(nk)`|`O(n+k)`|\n|[Counting Sort](https://en.wikipedia.org/wiki/Counting_sort \"Difference between maximum and minimum number 'k'\")|`Ω(n+k)`|`Θ(n+k)`|`O(n+k)`|`O(k)`|\n|[Cubesort](https://en.wikipedia.org/wiki/Cubesort)|`Ω(n)`|`Θ(n log(n))`|`O(n log(n))`|`O(n)`|","x":1440,"y":-311,"width":960,"height":622},
		{"id":"c19118c093cb8568","type":"text","text":"## Common Data Structure Operations\n\n|Data Structure|Time Complexity|   |   |   |   |   |   |   |Space Complexity|\n|---|---|---|---|---|---|---|---|---|---|\n||Average|   |   |   |Worst|   |   |   |Worst|\n|Algo Actions |Access|Search|Insertion|Deletion|Access|Search|Insertion|Deletion||\n|[Array](http://en.wikipedia.org/wiki/Array_data_structure)|`Θ(1)`|`Θ(n)`|`Θ(n)`|`Θ(n)`|`O(1)`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|\n|[Stack](http://en.wikipedia.org/wiki/Stack_(abstract_data_type))|`Θ(n)`|`Θ(n)`|`Θ(1)`|`Θ(1)`|`O(n)`|`O(n)`|`O(1)`|`O(1)`|`O(n)`|\n|[Queue](http://en.wikipedia.org/wiki/Queue_(abstract_data_type))|`Θ(n)`|`Θ(n)`|`Θ(1)`|`Θ(1)`|`O(n)`|`O(n)`|`O(1)`|`O(1)`|`O(n)`|\n|[Singly-Linked List](http://en.wikipedia.org/wiki/Singly_linked_list#Singly_linked_lists)|`Θ(n)`|`Θ(n)`|`Θ(1)`|`Θ(1)`|`O(n)`|`O(n)`|`O(1)`|`O(1)`|`O(n)`|\n|[Doubly-Linked List](http://en.wikipedia.org/wiki/Doubly_linked_list)|`Θ(n)`|`Θ(n)`|`Θ(1)`|`Θ(1)`|`O(n)`|`O(n)`|`O(1)`|`O(1)`|`O(n)`|\n|[Skip List](http://en.wikipedia.org/wiki/Skip_list)|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|`O(n log(n))`|\n|[Hash Table](http://en.wikipedia.org/wiki/Hash_table)|`N/A`|`Θ(1)`|`Θ(1)`|`Θ(1)`|`N/A`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|\n|[Binary Search Tree](http://en.wikipedia.org/wiki/Binary_search_tree)|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|\n|[Cartesian Tree](https://en.wikipedia.org/wiki/Cartesian_tree)|`N/A`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`N/A`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|\n|[B-Tree](http://en.wikipedia.org/wiki/B_tree)|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`O(log(n))`|`O(log(n))`|`O(log(n))`|`O(log(n))`|`O(n)`|\n|[Red-Black Tree](http://en.wikipedia.org/wiki/Red-black_tree)|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`O(log(n))`|`O(log(n))`|`O(log(n))`|`O(log(n))`|`O(n)`|\n|[Splay Tree](https://en.wikipedia.org/wiki/Splay_tree)|`N/A`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`N/A`|`O(log(n))`|`O(log(n))`|`O(log(n))`|`O(n)`|\n|[AVL Tree](http://en.wikipedia.org/wiki/AVL_tree)|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`O(log(n))`|`O(log(n))`|`O(log(n))`|`O(log(n))`|`O(n)`|\n|[KD Tree](http://en.wikipedia.org/wiki/K-d_tree)|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`Θ(log(n))`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|`O(n)`|","x":1150,"y":403,"width":1540,"height":720},
		{"id":"2550b8d5c6586d65","x":40,"y":-1150,"width":803,"height":2300,"type":"text","text":"To identify conditional logic in a coding challenge problem statement, you can:\n\n1. **Search for Keywords:** Look for words like \"if,\" \"else,\" \"switch,\" or \"when\" as they often indicate the presence of conditional statements.\n\n2. **Scan for Decision Points:** Identify decision points where the program needs to take different paths based on certain conditions.\n\n3. **Examine Constraints:** Check for constraints or requirements that involve specific conditions, as they might hint at conditional logic.\n\n4. **Analyze Input-Output Scenarios:** Understand how the program should behave under different input scenarios; this can reveal conditional statements.\n\n5. **Check for Loops:** Sometimes, loops with conditions can be mistaken for conditional logic, so ensure you differentiate between iterative and conditional structures.\n\n6. **Look for Case-Specific Instructions:** If the problem statement asks for specific actions under certain conditions, there might be conditional logic involved.\n\n7. **Explore Error Conditions:** Investigate error handling or exceptional cases, as they often involve conditional statements.\n\n8. **Examine Variable Usage:** Analyze how variables are used and modified based on specific conditions.\n\nBy systematically examining these aspects, you can effectively identify and understand the conditional logic embedded in a coding challenge problem statement.\n\n## Problem Example \nYou are given a list of songs where the `ith` song has a duration of `time[i]` seconds.\n\nReturn _the number of pairs of songs for which their total duration in seconds is divisible by_ `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.\n\n**Example 1:**\n\n**Input:** time = [30,20,150,100,40]\n**Output:** 3\n**Explanation:** Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60\n\n**Example 2:**\n\n**Input:** time = [60,60,60]\n**Output:** 3\n**Explanation:** All three pairs have a total duration of 120, which is divisible by 60.\n\n**Constraints:**\n\n- `1 <= time.length <= 6 * 104`\n- `1 <= time[i] <= 500`\n\n## Application of Methodology \nLet's apply the methodologies to identify the conditional logic in the given problem statement:\n\n1. **Search for Keywords:** Look for phrases like \"total duration divisible by 60\" and \"(time[i] + time[j]) % 60 == 0.\" These indicate the presence of conditional logic related to divisibility by 60.\n\n2. **Scan for Decision Points:** Identify the decision point involving the condition `(time[i] + time[j]) % 60 == 0` where the program decides if the total duration is divisible by 60.\n\n3. **Examine Constraints:** The constraints indicate the range of values for `time[i]` and set the boundaries for the problem.\n\n4. **Analyze Input-Output Scenarios:** The output depends on pairs of songs where the total duration is divisible by 60, highlighting the conditional nature of the problem.\n\nNow, let's list the conditional logic:\n\n- Conditional Statement: `(time[i] + time[j]) % 60 == 0`\n- Decision Point: Checking if the sum of durations is divisible by 60.\n  \nTherefore, the conditional logic is based on checking whether the total duration of pairs of songs is divisible by 60."},
		{"id":"4892b8b83184b247","type":"link","url":"https://algo.monster/flowchart","x":-5440,"y":1150,"width":2240,"height":3960},
		{"id":"4b518e46e9d6564e","type":"text","text":"## Identifying Algo Patterns \n\nContext clues that indicate the use of a certain pattern or multiple patterns\n\n\nlook at\n\n[[Key Base Attributes of  Grokking Algorithm patterns]]","x":-4927,"y":532,"width":607,"height":463}
	],
	"edges":[
		{"id":"f5b9dc08cce9d0d6","fromNode":"f395ab11333254a1","fromSide":"bottom","toNode":"77e85144bef13843","toSide":"top"},
		{"id":"28f674c55fed6e52","fromNode":"bb311c395d14aedf","fromSide":"right","toNode":"a0e725495f717a94","toSide":"left"},
		{"id":"0ee3c70457c1f34a","fromNode":"a0e725495f717a94","fromSide":"top","toNode":"6c1c19ff856feafe","toSide":"bottom"}
	]
}