{
	"nodes":[
		{"id":"6aafc9b8ff9e7da6","type":"group","x":2400,"y":800,"width":3200,"height":2130,"label":"Search"},
		{"id":"96e0f61d45cf77af","type":"group","x":2680,"y":-840,"width":2820,"height":1545,"label":"Sort"},
		{"id":"07d62924182f2fd5","type":"group","x":960,"y":1865,"width":982,"height":1640,"color":"#ff7b00","label":"Common Chain-able function"},
		{"id":"36e3306da4ab28f3","type":"group","x":3880,"y":863,"width":860,"height":1251,"color":"4","label":"Untitled group"},
		{"id":"59c4eac631d01080","type":"group","x":600,"y":191,"width":1000,"height":889,"color":"3","label":"Array Property"},
		{"id":"0d5b4a3713b13319","type":"group","x":2856,"y":1665,"width":993,"height":775,"color":"5","label":"Untitled group"},
		{"id":"0e9b2964fb08cff7","type":"group","x":600,"y":1180,"width":1420,"height":540,"color":"#ffdd00","label":"Common chain-able function"},
		{"id":"8ed5a70a45fca99c","type":"group","x":160,"y":1960,"width":543,"height":1280,"color":"2","label":"String  Attributes"},
		{"id":"e647f2a1870e97e1","type":"group","x":760,"y":-880,"width":760,"height":900,"color":"1","label":"Num Attributes"},
		{"id":"6bfe6b17f4c0bde4","type":"group","x":960,"y":3760,"width":782,"height":720,"color":"#00fa53","label":"Common Chain-able function"},
		{"id":"3fd411d95f3a75a5","type":"group","x":2560,"y":880,"width":672,"height":640,"color":"4","label":"Untitled group"},
		{"id":"bb1edd6a47fffcd9","type":"group","x":1760,"y":-840,"width":480,"height":782,"label":"Untitled group"},
		{"id":"fd325d709a909001","type":"text","text":"### Length","x":818,"y":217,"width":195,"height":53,"color":"5"},
		{"id":"a127ec6be2967a6f","type":"text","text":"Ascending","x":932,"y":520,"width":200,"height":60},
		{"id":"d7df8a358d5c2c76","type":"text","text":"## Array  ","x":-303,"y":580,"width":170,"height":53,"color":"3"},
		{"id":"ed17fc0c28eeb61a","type":"text","text":"### Sorted","x":790,"y":370,"width":250,"height":60},
		{"id":"998645ac0a80e98a","type":"text","text":"### [[Partially Sorted]]","x":731,"y":748,"width":381,"height":60},
		{"id":"f13012b2a9ed16e5","type":"text","text":"### Unsorted","x":742,"y":635,"width":250,"height":60},
		{"id":"0f0845e7947dc225","type":"text","text":"Descending","x":664,"y":520,"width":200,"height":60},
		{"id":"b3998e713c9f6a67","type":"text","text":"### Unique Values","x":881,"y":840,"width":302,"height":60,"color":"5"},
		{"id":"d0c92a99295ec595","type":"text","text":"##### Missing multiple Values in Range","x":1404,"y":692,"width":499,"height":86},
		{"id":"25329102cf33f0cf","type":"text","text":"### Duplicate Values","x":950,"y":925,"width":364,"height":50,"color":"5"},
		{"id":"d2f1a8a1ed3d9acb","type":"text","text":"## Numbers","x":-303,"y":-480,"width":209,"height":53,"color":"1"},
		{"id":"5b67aab17a85a0fc","type":"text","text":"Can Decreased ","x":-467,"y":-661,"width":250,"height":60},
		{"id":"f47025662be4d181","type":"text","text":"### Whole(Pos & 0)","x":814,"y":-537,"width":470,"height":60},
		{"id":"5e34ed5a811ee8e5","type":"text","text":"### Natural (Positive)","x":814,"y":-620,"width":395,"height":60},
		{"id":"eaa0306b2db490a2","type":"text","text":"### Integers(Negatives)","x":814,"y":-440,"width":444,"height":60},
		{"id":"82d39e439eab49f0","type":"text","text":"### Rational (Decimal & Fraction )","x":814,"y":-341,"width":636,"height":60},
		{"id":"e7da0726f1b38235","type":"text","text":"### Fixed","x":1112,"y":217,"width":193,"height":62},
		{"id":"d946efd45df7c067","type":"text","text":"Easy Access Action","x":1380,"y":229,"width":180,"height":116},
		{"id":"9f3e9abaa905df55","type":"text","text":"### Vairiable","x":1087,"y":345,"width":244,"height":55},
		{"id":"80aa24801bd6f049","type":"text","text":"Bigger range of values","x":-544,"y":-231,"width":250,"height":110},
		{"id":"861854468e552a3b","type":"text","text":"Ascii subset of UTF-16","x":-94,"y":-300,"width":194,"height":119},
		{"id":"da447d8b515a18d3","type":"text","text":"Unicode","x":-460,"y":-300,"width":157,"height":60},
		{"id":"a64c2aba2359509f","type":"text","text":"Can Increase","x":-184,"y":-661,"width":250,"height":60},
		{"id":"a77873bfa2b20c96","type":"text","text":"### Max","x":814,"y":-840,"width":250,"height":60},
		{"id":"31329d471a3a8a53","type":"text","text":"# Returns Removed element","x":6,"y":-1434,"width":634,"height":50,"color":"#bbff00"},
		{"id":"e7fed9a36f687de8","type":"text","text":"# Returns Array","x":713,"y":-1437,"width":452,"height":55,"color":"3"},
		{"id":"79bc1f2ad745f2d0","type":"text","text":"### Min","x":814,"y":-741,"width":250,"height":60},
		{"id":"5bd8471b228d8401","type":"text","text":"# Parameters","x":-373,"y":-1016,"width":379,"height":60},
		{"id":"b85bba1a82335db6","type":"text","text":"# Returns Boolean","x":1239,"y":-1440,"width":446,"height":65,"color":"6"},
		{"id":"fc6a079dcef6d3a5","type":"text","text":"# Parameter Properties","x":729,"y":-1076,"width":820,"height":60},
		{"id":"b21a8f41ba9f5449","type":"text","text":"# Constant Time Access Action","x":3363,"y":837,"width":375,"height":147},
		{"id":"92104a1f8dfd0cba","type":"file","file":"Algorithms & Data Structures/_Infographic/2D Array.png","x":5220,"y":1214,"width":320,"height":229},
		{"id":"84a011f6ec72751e","type":"text","text":"##### Matrix","x":5220,"y":1010,"width":250,"height":60,"color":"3"},
		{"id":"f9786e4748f90821","type":"text","text":"The order in which you ask these types of questions may depend on the context of the coding challenge and the specific goals you want to achieve. However, here's a general suggested order:\n\n> Closed ended question also known as yes or no questions can be asked after any of these question types\n\n1. **Open Questions:** Start with open-ended questions to gauge the candidate's understanding and approach to the coding challenge.\n\n2. **Divergent Questions:** Encourage open discussion and opinion sharing. This can provide insights into their problem-solving thought process.\n\n3. **Probing Questions:** Use follow-up questions to understand perspectives and encourage deeper reasoning. This helps in evaluating the depth of their understanding and thought process.\n\n4. **Comparison Questions:** Ask higher-order questions to compare different aspects of their solution or approach. This assesses their ability to critically analyze and make informed comparisons.\n\n5. **Recall and Process Questions:** Assess their knowledge recall and understanding of the problem. This helps ensure they grasp the basics before diving deeper.\n\n","x":6640,"y":-1116,"width":680,"height":1232},
		{"id":"c1900d733fc738bc","type":"text","text":"## Research more\n#todo/med/dev \n- [ ] Add something for topological sort which is specifically for graphs","x":4940,"y":240,"width":503,"height":311},
		{"id":"9da8c621c89f4817","type":"text","text":"### [[Linear search vs Binary search#Binary Search |Binary]]","x":3488,"y":2054,"width":250,"height":60},
		{"id":"e481161a3cfe55e8","type":"file","file":"Algorithms & Data Structures/_Coding Whiteboard/lc704.png","x":3480,"y":2521,"width":400,"height":292},
		{"id":"c539150a20f457ba","type":"file","file":"Algorithms & Data Structures/_Coding Whiteboard/lc744.png","x":3950,"y":2626,"width":400,"height":187},
		{"id":"4d6bed29ee7ed731","type":"text","text":"# Search Algorithm","x":5100,"y":1711,"width":440,"height":80},
		{"id":"2ae1ab983a187f4f","type":"text","text":"## Clarifying Question\n\n### Ask\nStart off with Funneling question starting with:\n#### Open ended interrogative pronoun question like `What`\n- The focus of these question should be on the overall problem statement then get specific.\n- Ask about the problem Constraints(boundaries or conditions).\n- Then get specific shifting focus of questions to the given `test cases` and then `edge cases`.\n\n##### Examples:\n- Ask  **what if**  or you can rephrase it saying `\"can I assume this or that …\"` \n\n\n### Then Interrogative adverb questions like\n\n#### Why - identify the root overall or at specific scopes \n- Can be asked in different ways `\"Is there any reason this wouldn't have... \"`\n- \n#### Which - Identify the specific components or requirements of the problem. \n- Which elements are crucial to address?\n- \n#### How - identify the steps  \n- This is used after you collect information as define steps you will order them appropriately\n- \n\n#### When -  Consider any time-related constraints or dependencies in the problem. \n- When should certain actions or conditions occur?\n- \n\n#### Where - Clarify the context or scope of the problem. \n- Where does the solution need to be applied or optimized?\n\n\n#### Closed ended more specific even just yes or no\n\n\n#### Ask question Verifying your understanding of the problem ","x":7380,"y":-1188,"width":761,"height":1724,"color":"4"},
		{"id":"a1bf9515b87b791c","type":"file","file":"Algorithms & Data Structures/Algorithms/Approach Pivot.md","x":8320,"y":-1377,"width":1040,"height":2637},
		{"id":"497bad7a329a123d","type":"text","text":"# Define Approach then Convert to\n\n## Step by Step Approach Breakdown\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\nBreak(stops loop) or continue(skip iteration) \n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n\n<mark style=\"background: #CACFD9A6;\">Initialize/Store </mark>\nsome variable or data structure\n\n\n<mark style=\"background: #FFF3A3A6;\">Search</mark>\n\n\n<mark style=\"background: #FFB8EBA6;\">Check if Read(access)</mark>\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n<mark style=\"background: #D2B3FFA6;\">Update</mark>\ninsert/delete/reassignment \n\n<mark style=\"background: #ABF7F7A6;\">Sort</mark>\n\n\n<mark style=\"background: #FF5582A6;\">Return</mark>\n\n\n> Things like search and read\nare common things to break\nout into helper functions\n\nType of Conditions\nTermination condition meaning condition with a return\n\n\n### Discrete Math truth table\nCustom truth table potential use case for identifying overlapping conditions and if they make sense. \n\n🔼 represent `AND` operator  \n🔽 represent `OR` operator\n✅ represent definitely\n🚫 represent not likely \n🤷 represents possibly depends on requirements \n\n\n\n| Truth  Table | 1 | 2 | 3 | 1🔽2 | 1🔼3 |\n| ---- | ---- | ---- | ---- | ---- | ---- |\n| 1. new cus | T | T | T | F |  |\n| 2. repeat cus | T | T | F | T |  |\n| 3. coupon cus | T | F | T |  |  |\n| **result** | 🚫 | 🚫 | ✅ | 🤷 | 🤷 |\n\n\n\n","x":8700,"y":1563,"width":820,"height":1880,"color":"2"},
		{"id":"12a5a6335b47547e","type":"text","text":"## Coding Stage\n\n\nDoes the value of a variable need to persist outside of a loop if so declared a variable inside of the loop if you want to keep it there and you don't care about the value persistence otherwise declare outside and reference it inside\n\n\n### Talking point\n- I typically would create a pure function that performs a [[Shallow Copy and Deep Copy(clone) |deep copy]] and avoids unintended side affects around the given parameters like shallow copy, but for the sake of time we can keep this function impure in order to focus on the task at hand.\n\n- When dealing with overlapping conditions, I like to use [[Conditional Logic and Operators#Short circuit evaluation |Short circuit evaluation]]. So if I'm dealing with conditions using the `&&` operator, I prioritize the statement most likely to fail as the first condition. In contrast, for conditions using the `||` operator, I opt for placing the statement that is most likely to be true as the first condition.\n\n- So I will be writing my code in more of a Imperative style instead of Declarative style which can be time consuming in terms of identifying runtime complexity. \n\n- Iterative looping or Recursive looping\n\n\nalso closure when doing dynamic programming\n\n\n\nmaybe compare things to real life example or some thing and talk about that\n\n","x":9840,"y":911,"width":960,"height":1080,"color":"1"},
		{"id":"71833ddda7800461","type":"text","text":"## Algo Points of focus \n- Given Constraints\n- Given Input\n- Given Input Variation(Test Cases and Edge Cases) \n- Defined Primitive type Variables(Boolean, String, Integer, etc..) \n- If multiple inputs/params focus on the one that directly influence the problem and has the most constraints then shift focus to the others examine the relationship between params. \n- Defined Data structure being leveraged in approach\n- Search like where is you looping logic focused on the given input or a Data structure. \n\t- Are you using a Binary Search or Linear Search\n\t- Is the Structure Traversable like an array where you can loop from the beginning, middle if you are using binary search logic or at the end.\n\t- Do is it matter that the structure is Traversable meaning if you don't care about the order you loop in can it at least be itterable like for example a set which can't be traversed and doesn't have access actions.\n\t- Is the given input and test cases pre sorted, partially sorted, or unsorted.\n\t- Do care about preserving the default order of given input.\n\t- Are you searching through a range of values or partial range.\n\t- binary search can be focused on array index as well if you don't care about searching based on array element at the index\n\n\nCan structure be traversed meaning a specific order like with array or not like a set which needs a iterable value like an array or string passed into its constructor or a iterable passed to its `add` method then you get duplicates removed and you get values returned in the order they were inserted in the set.\n\n\n\n","x":7341,"y":854,"width":800,"height":1351},
		{"id":"534e910feb79864d","type":"text","text":"## Big O Scale\n> Dominate terms or runtime close to excellent takes president over lower terms for overall algorithm run time.\n\n### Exe Time                     Start ⬇\n\n#### O(1) Constant Time\n#### O(log n) Logarithmic Time **Binary Search**\n#### O(n) Linear Time          **Linear Search**\n#### O(n log(n)) Linearithmic Time - **SORTS**              \n#### O(n^2) Quadratic\n#### O(2^n) Exponential  **Nested Loop** or **Recursion**\n#### O(n^3) Cubic **Triple Loop** \n#### O(n^k) Polynomial Time **Recursion**\n#### O(n!) Factorial Time\n##### Worst Time                End\n\nSo if you have algorithm that is Linear time meaning it's doing some type of search and you implement a sort be looping in the function then the overall runtime improves to Logarithmic Time.\n\n","x":5840,"y":507,"width":960,"height":990},
		{"id":"9388666a2e46910e","type":"text","text":"![[Merge sort]]","x":4472,"y":-744,"width":888,"height":790},
		{"id":"95dce9009e359e66","type":"text","text":"## Deletion","x":4838,"y":3320,"width":250,"height":60},
		{"id":"d618243906e0f413","type":"text","text":"## [[Map]] [[Non-Linear Data Structure Runtime Comparison#^22edde|Constant Time]]","x":3048,"y":3710,"width":455,"height":50},
		{"id":"24a75ab08f8d1ef2","type":"text","text":"## [[Sets |Set]] [[Non-Linear Data Structure Runtime Comparison#^0b928b|Constant Time]]","x":2780,"y":4070,"width":420,"height":80},
		{"id":"ccdb941ed8083152","type":"text","text":"Similar two other types of linked list","x":2204,"y":3800,"width":276,"height":146},
		{"id":"3c3da4664bad290d","type":"text","text":"## Linked List","x":2060,"y":3675,"width":289,"height":60},
		{"id":"9048920a62b4b60d","type":"text","text":"To identify conditional logic in a coding challenge problem statement, you can:\n\n1. **Search for Keywords:** Look for words like \"if,\" \"else,\" \"switch,\" or \"when\" as they often indicate the presence of conditional statements.\n\n2. **Scan for Decision Points:** Identify decision points where the program needs to take different paths based on certain conditions.\n\n3. **Examine Constraints:** Check for constraints or requirements that involve specific conditions, as they might hint at conditional logic.\n\n4. **Analyze Input-Output Scenarios:** Understand how the program should behave under different input scenarios; this can reveal conditional statements.\n\n5. **Check for Loops:** Sometimes, loops with conditions can be mistaken for conditional logic, so ensure you differentiate between iterative and conditional structures.\n\n6. **Look for Case-Specific Instructions:** If the problem statement asks for specific actions under certain conditions, there might be conditional logic involved.\n\n7. **Explore Error Conditions:** Investigate error handling or exceptional cases, as they often involve conditional statements.\n\n8. **Examine Variable Usage:** Analyze how variables are used and modified based on specific conditions.\n\nBy systematically examining these aspects, you can effectively identify and understand the conditional logic embedded in a coding challenge problem statement.\n\n## Problem Example \nYou are given a list of songs where the `ith` song has a duration of `time[i]` seconds.\n\nReturn _the number of pairs of songs for which their total duration in seconds is divisible by_ `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.\n\n**Example 1:**\n\n**Input:** time = [30,20,150,100,40]\n**Output:** 3\n**Explanation:** Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60\n\n**Example 2:**\n\n**Input:** time = [60,60,60]\n**Output:** 3\n**Explanation:** All three pairs have a total duration of 120, which is divisible by 60.\n\n**Constraints:**\n\n- `1 <= time.length <= 6 * 104`\n- `1 <= time[i] <= 500`\n\n## Application of Methodology \nLet's apply the methodologies to identify the conditional logic in the given problem statement:\n\n1. **Search for Keywords:** Look for phrases like \"total duration divisible by 60\" and \"(time[i] + time[j]) % 60 == 0.\" These indicate the presence of conditional logic related to divisibility by 60.\n\n2. **Scan for Decision Points:** Identify the decision point involving the condition `(time[i] + time[j]) % 60 == 0` where the program decides if the total duration is divisible by 60.\n\n3. **Examine Constraints:** The constraints indicate the range of values for `time[i]` and set the boundaries for the problem.\n\n4. **Analyze Input-Output Scenarios:** The output depends on pairs of songs where the total duration is divisible by 60, highlighting the conditional nature of the problem.\n\nNow, let's list the conditional logic:\n\n- Conditional Statement: `(time[i] + time[j]) % 60 == 0`\n- Decision Point: Checking if the sum of durations is divisible by 60.\n  \nTherefore, the conditional logic is based on checking whether the total duration of pairs of songs is divisible by 60.","x":7400,"y":2342,"width":803,"height":3030},
		{"id":"8e877835b7fc6dca","type":"text","text":"![[Quick Sort]]","x":3080,"y":-793,"width":909,"height":544},
		{"id":"ef4bc5db2cb074b8","type":"text","text":"### What sub action is the problem asking \nLike is it asking for you to search through some given input or is searching even necessary in the scope of the problem.\n\nIs it asking you to sort or do you just need to do some access action for a specific value\n\nYou can also be asked to a question where the solution may include implementing a cyclic sort.\n","x":3120,"y":-1407,"width":1106,"height":447},
		{"id":"46be2215c78bcc7c","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Check if Number |Check if Number]]","x":1815,"y":-151,"width":338,"height":60,"color":"6"},
		{"id":"62208d542ae9625c","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Number From String |String to Number]] ","x":1808,"y":-253,"width":351,"height":60,"color":"1"},
		{"id":"173f890c3551a66c","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Number Decimal place |Fixed Decimal Place]]","x":1808,"y":-369,"width":395,"height":60,"color":"1"},
		{"id":"7807d68b78e73016","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Rounding Numbers |Rounding Numbers]]","x":1808,"y":-500,"width":366,"height":60,"color":"1"},
		{"id":"53ecdc5c8efbe430","type":"text","text":"## Set [[Non-Linear Data Structure Runtime Comparison#^a73e52|Constant Time]]","x":5273,"y":3480,"width":420,"height":80},
		{"id":"4a27c025f90f6990","type":"text","text":"## Map [[Non-Linear Data Structure Runtime Comparison#^2057fe|Constant Time]]","x":5253,"y":3760,"width":440,"height":50},
		{"type":"text","text":"<center>\n  <h4 style=\"font-size: 80px; -webkit-text-stroke: 1px green; -webkit-text-fill-color: transparent;\"> Data Structure For Optimal Update Actions  </h4>\n</center>\n\n","id":"f87a98447aa26838","x":2894,"y":3057,"width":1456,"height":294,"color":"6"},
		{"id":"5c5708b88168ef04","type":"text","text":"![[Key Base Attributes of  Grokking Algorithm patterns#Topological Sort]]","x":3955,"y":201,"width":640,"height":440},
		{"id":"7d6e1a382e4db349","type":"file","file":"Algorithms & Data Structures/_Coding Whiteboard/lc448.png","x":2782,"y":360,"width":400,"height":246},
		{"id":"2e8b93c2e6c70435","type":"text","text":"## Sorting","x":3904,"y":46,"width":250,"height":60},
		{"id":"ea00ba2f6fe54da5","type":"text","text":"#### String of numbers","x":903,"y":-234,"width":355,"height":60,"color":"2"},
		{"id":"0daf4dc22e491943","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Absolute value |Absolute value]]","x":1816,"y":-606,"width":349,"height":67,"color":"1"},
		{"id":"925f617c16d777c7","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Min |Min]]","x":1928,"y":-711,"width":125,"height":60,"color":"1"},
		{"id":"67bf976993c63b8e","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Max |Max]]","x":1928,"y":-821,"width":125,"height":60,"color":"1"},
		{"id":"06413c3de7a7fc2a","type":"text","text":"# Returns Number","x":1768,"y":-1437,"width":449,"height":60,"color":"1"},
		{"id":"04277c69d1d0dcbb","type":"text","text":"# Returns String","x":2310,"y":-1437,"width":449,"height":60,"color":"2"},
		{"id":"efc4e4d2feb486df","type":"text","text":"# Non DS Built in Functions","x":1650,"y":-1076,"width":820,"height":60},
		{"id":"b90d733e190b4c63","type":"file","file":"Algorithms & Data Structures/_Coding Whiteboard/lc268.png","x":2782,"y":-14,"width":400,"height":291},
		{"id":"39c0b7eb30f870f6","type":"text","text":"# [[Key Base Attributes of  Grokking Algorithm patterns#Cyclic Sort |Cyclic Sort]]","x":2740,"y":-160,"width":484,"height":60},
		{"id":"a1ed74c48ddd021f","type":"text","text":"### Even","x":1159,"y":-58,"width":250,"height":60},
		{"id":"5c61687d30c0def1","type":"text","text":"### [[Algorithm Most Common Built in Functions#Parity Check |Parity]] ","x":894,"y":-72,"width":218,"height":60},
		{"id":"86e2e275d6e21bee","type":"text","text":"### Odd","x":1159,"y":-147,"width":250,"height":60},
		{"id":"9ded773e2ffa3a1c","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Flat|Flat]]","x":1232,"y":1515,"width":164,"height":50,"color":"3"},
		{"id":"3e9bce92f555e39e","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Reverse |Reverse]]","x":1431,"y":1399,"width":195,"height":60,"color":"3"},
		{"id":"e912707a10dc0e4d","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array at |At]] \n","x":1360,"y":1240,"width":100,"height":50},
		{"id":"6af0983b691d897a","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Includes|Includes]]","x":925,"y":1277,"width":232,"height":50,"color":"6"},
		{"id":"c97eb2d68bc5b7e9","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array FlatMap |FlatMap]]","x":1121,"y":1577,"width":193,"height":50,"color":"3"},
		{"id":"0d697435e2e19a71","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Array Filter|Filter]]","x":1032,"y":1401,"width":171,"height":57,"color":"3"},
		{"id":"3a7720fb057c7d6e","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array every |every]]","x":1145,"y":1202,"width":175,"height":50,"color":"6"},
		{"id":"af28b31710e23ea0","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array concat |Concat]]","x":1360,"y":1627,"width":176,"height":60,"color":"3"},
		{"id":"f8e79c60c60d7ec1","type":"text","text":"### [[Algorithm Most Common Built in Functions#Ascii Code to Character |fromCharCode]]","x":1179,"y":2295,"width":451,"height":50,"color":"2"},
		{"id":"b39f7fae8e9a30a3","type":"text","text":"Code to Character","x":1241,"y":2226,"width":308,"height":60},
		{"id":"c00306235821983c","type":"text","text":"matchAll","x":1279,"y":3070,"width":205,"height":50,"color":"3"},
		{"id":"5d351a034933973c","type":"text","text":"Can chain other array methods or number or math functions that makes sense depending on problem","x":1617,"y":3024,"width":285,"height":291},
		{"id":"ca62e46b96c8640f","type":"text","text":"## Strings","x":-312,"y":1754,"width":211,"height":53,"color":"2"},
		{"id":"6076563a4e4481d8","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array to String |Join]]  ","x":950,"y":1610,"width":154,"height":50,"color":"2"},
		{"id":"d820a9b2509a4952","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Pop |Pop]]","x":664,"y":1640,"width":250,"height":50,"color":"#bbff00"},
		{"id":"16e92aeedfed376e","type":"text","text":"## Insertion","x":2320,"y":3314,"width":320,"height":73},
		{"id":"c348f040e659dca0","type":"text","text":"### Multi Character","x":277,"y":2343,"width":359,"height":60},
		{"id":"6dcaf3843411ca15","type":"text","text":"### Letter Case ","x":280,"y":2446,"width":339,"height":50},
		{"id":"9585a7d4f9b71583","type":"text","text":"### Alphabetic Order ","x":281,"y":2226,"width":355,"height":53},
		{"id":"fdcf7eb070026dda","type":"text","text":"Implement some conditional logic around range depends on problem ","x":986,"y":2060,"width":445,"height":120},
		{"id":"ecfc42ef14105761","type":"text","text":"### [[Algorithm Most Common Built in Functions#Character to Ascii Code |CharCodeAt]]","x":1050,"y":1940,"width":373,"height":60,"color":"1"},
		{"id":"a4d23f140412df3f","type":"text","text":"Character to Code","x":1072,"y":1885,"width":357,"height":50},
		{"id":"41fac452e0ce903e","type":"text","text":"### Alphabetic Range ","x":272,"y":2113,"width":355,"height":53},
		{"id":"83530d618210f901","type":"text","text":"##### Character Code","x":250,"y":1979,"width":377,"height":60},
		{"id":"d12a903cbb8a0c13","type":"text","text":"##### word or character exist in string","x":201,"y":3105,"width":418,"height":90},
		{"id":"ba562c96edc37058","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array entries |Entries]]","x":1754,"y":1590,"width":217,"height":50,"color":"3"},
		{"id":"e01e6d05f8acb51f","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array From |From]]","x":1792,"y":1433,"width":150,"height":50,"color":"3"},
		{"id":"6f09c0617fe25487","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Map |Map]]","x":1863,"y":1343,"width":126,"height":50,"color":"3"},
		{"id":"53db662bc64d298c","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Fill |Fill]]","x":1620,"y":1327,"width":160,"height":50,"color":"3"},
		{"id":"09b649b63eced196","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Find |Find]]","x":1720,"y":1235,"width":144,"height":60,"color":"3"},
		{"id":"a73b83869550d3ce","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Sort |Sort]] ","x":1560,"y":1219,"width":140,"height":50,"color":"3"},
		{"id":"c806f5f280a1783e","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Splice |Splice]]","x":1525,"y":1560,"width":195,"height":60,"color":"3"},
		{"id":"7986a822ebd64a29","type":"text","text":"#### toLowerCase()","x":1075,"y":2408,"width":332,"height":60,"color":"2"},
		{"id":"ddb81fc53ec02b34","type":"text","text":"replaceAll","x":1279,"y":3265,"width":250,"height":50,"color":"2"},
		{"id":"8a0f98a590ca8343","type":"text","text":"replace","x":1273,"y":3170,"width":250,"height":50,"color":"2"},
		{"id":"d11472b8e9469b92","type":"text","text":"### [[Algorithm Most Common Built in Functions#Split |Split]]","x":1677,"y":1935,"width":168,"height":60,"color":"3"},
		{"id":"ae905fa1ddc28d39","type":"text","text":"### [[Algorithm Most Common Built in Functions#hasOwnProperty |hasOwnProperty]]","x":1040,"y":3920,"width":329,"height":60,"color":"6"},
		{"id":"3972ec4da8c62a10","type":"text","text":"### [[Algorithm Most Common Built in Functions#Keys | Keys]]","x":1160,"y":4020,"width":158,"height":60,"color":"3"},
		{"id":"4df07f5ff93de20c","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Reduce |Reduce]]","x":895,"y":1202,"width":195,"height":50,"color":"1"},
		{"id":"b4663b5dadd09058","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array push |Push]]","x":664,"y":1343,"width":250,"height":60,"color":"3"},
		{"id":"7873e05630bb9cea","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Slice|Slice]]","x":627,"y":1216,"width":164,"height":57,"color":"3"},
		{"id":"3801d47c16a9e09e","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array UnShift |Unshift]]","x":664,"y":1540,"width":250,"height":60,"color":"3"},
		{"id":"9500e2ffeb2896d0","type":"text","text":"### [[Algorithm Most Common Built in Functions#Array Shift|Shift]]","x":665,"y":1443,"width":250,"height":60,"color":"#bbff00"},
		{"id":"f181c6d2b5f3fc1f","type":"text","text":"### SubString = individual characters","x":276,"y":2564,"width":339,"height":160},
		{"id":"ca811a1394c0f30a","type":"text","text":"#### toUpperCase()","x":1081,"y":2506,"width":310,"height":60,"color":"2"},
		{"id":"ac82dd968a6ed0c1","type":"text","text":"[[Regular expression |Regex]]","x":742,"y":3005,"width":250,"height":60},
		{"id":"0f0c1c22c4017a9f","type":"text","text":"### [[Algorithm Most Common Built in Functions#getOwnPropertyNames |getOwnPropertyNames]]","x":1188,"y":4120,"width":482,"height":60,"color":"3"},
		{"id":"86007369e8eadaa4","type":"text","text":"### [[Algorithm Most Common Built in Functions#Freeze |Freeze]]","x":1160,"y":4240,"width":250,"height":60},
		{"id":"514c365be78e166b","type":"text","text":"### [[Algorithm Most Common Built in Functions#Entries |Entries]]","x":1179,"y":4380,"width":250,"height":60,"color":"3"},
		{"id":"621d34172855a93f","type":"text","text":"###### Ends with Word or Character ","x":210,"y":2764,"width":457,"height":60},
		{"id":"39385449ae56a059","type":"text","text":"### Empty Space = \" \"","x":231,"y":3005,"width":395,"height":60},
		{"id":"60eaa452b58a3486","type":"text","text":"### Empty String =  \"\"","x":240,"y":2899,"width":395,"height":60},
		{"id":"fb939de4f80d9504","type":"text","text":"## Object","x":-300,"y":3800,"width":211,"height":60,"color":"#00fa53"},
		{"id":"8d6bd4958800f7c0","type":"text","text":"### [[Algorithm Most Common Built in Functions#Ends With |End With]] or [[Algorithm Most Common Built in Functions#Starts With |Starts with]]","x":1116,"y":2789,"width":494,"height":50,"color":"6"},
		{"id":"9597dc0a2f469337","type":"text","text":"### [[Algorithm Most Common Built in Functions#Slice |Slice]]","x":1510,"y":2679,"width":250,"height":60,"color":"2"},
		{"id":"dc949d24f4fcb3b7","type":"text","text":"### [[Algorithm Most Common Built in Functions#Specific Range of SubString| SubString]]","x":1493,"y":2585,"width":250,"height":60,"color":"2"},
		{"id":"492765133b4a6750","type":"text","text":"both can be","x":1488,"y":2444,"width":250,"height":60},
		{"id":"765df1a3f9a07eac","type":"text","text":"#### [[Algorithm Most Common Built in Functions#Include |Includes]]","x":1273,"y":2889,"width":250,"height":50,"color":"6"},
		{"id":"0df1cc4cc22c8a75","type":"text","text":"match","x":1283,"y":2974,"width":165,"height":50,"color":"3"},
		{"id":"a464fdccbbed41f5","type":"text","text":"search ","x":1279,"y":3400,"width":250,"height":50,"color":"2"},
		{"id":"cf17e6079bfd71ed","type":"text","text":"## Graph","x":4210,"y":1965,"width":250,"height":60},
		{"id":"b0d5eb91409aab19","type":"text","text":"## Stacks","x":4428,"y":1503,"width":250,"height":60},
		{"id":"1dddbf541fbab3f7","type":"text","text":"## Linked List","x":4066,"y":1503,"width":289,"height":60},
		{"id":"d8efb2641269bdc5","type":"text","text":"## Tree","x":4178,"y":1880,"width":250,"height":60},
		{"id":"239591fa02eeff5c","type":"text","text":"  ```javascript\n  const length = array.length;\n  const middle = Math.floor(length / 2);\n  const left = array.slice(0, middle);\n  const right = array.slice(middle);\n  ```\n","x":4178,"y":2342,"width":677,"height":179},
		{"id":"0676564d217769e0","type":"text","text":"### DFS","x":5148,"y":1940,"width":250,"height":50},
		{"id":"f81ef82171007f38","type":"text","text":"### BFS","x":5148,"y":2060,"width":250,"height":60},
		{"id":"ba278a9ba0cac62b","type":"text","text":"### DFS","x":5148,"y":2175,"width":250,"height":60},
		{"id":"6dae9f36d2eff64c","type":"text","text":"##### Two-Dimensional Array","x":4834,"y":863,"width":386,"height":60,"color":"3"},
		{"id":"cfdda6a33108ebd3","type":"text","text":"### BFS","x":5148,"y":1820,"width":250,"height":60},
		{"id":"5821d09cadc7d49f","type":"file","file":"Algorithms & Data Structures/_Infographic/Stack.png","x":4628,"y":1640,"width":65,"height":151},
		{"id":"3f2bd05759706b72","type":"text","text":"##### Circular","x":4911,"y":1334,"width":250,"height":60},
		{"id":"02ce8d9440662a5c","type":"text","text":"##### Doubly","x":4834,"y":1213,"width":250,"height":60},
		{"id":"af8b533555b5f509","type":"text","text":"# [[Iterating vs Traversing#^e9021e|Iterable]]","x":2600,"y":910,"width":500,"height":50},
		{"id":"4317ae874cc61af1","type":"text","text":"##### Nested Array","x":4773,"y":1040,"width":250,"height":60,"color":"3"},
		{"id":"3499ff7e5bb5953c","type":"text","text":"## **_Declarative_**","x":2422,"y":2244,"width":313,"height":60},
		{"id":"89bca0c24d5f520d","type":"text","text":"### [[Linear search vs Binary search#Linear/Sequential Search|Linear]]","x":2923,"y":2060,"width":250,"height":60},
		{"id":"48d987bb85b70c5e","type":"text","text":"## [[Non-Linear Data Structure Runtime Comparison#6. Query | Graph]]","x":2955,"y":1026,"width":197,"height":74},
		{"id":"478667fc12bcdd94","type":"text","text":"Always while loop for this search","x":4066,"y":2205,"width":394,"height":78},
		{"id":"bc929a986562ba89","type":"text","text":"## Queues","x":4460,"y":1130,"width":250,"height":57},
		{"id":"4dba084e7c3d76be","type":"text","text":"# [[Iterating vs Traversing#^5bf9d2|Traversalbe]]","x":4225,"y":893,"width":470,"height":60},
		{"id":"7687d60c4ddab81c","type":"text","text":"add & remove","x":4272,"y":1050,"width":245,"height":50},
		{"id":"b54ad6dcd198773b","type":"text","text":"## All Linear Time Search ","x":3886,"y":903,"width":324,"height":99},
		{"id":"56c29e39a438b323","type":"text","text":"## Array","x":4071,"y":1130,"width":250,"height":60,"color":"3"},
		{"id":"cae3a9b501113eeb","type":"text","text":"## **Imperative**","x":2422,"y":2024,"width":313,"height":60},
		{"id":"27db0598cd9ab942","type":"text","text":"# Coding Style","x":2422,"y":1880,"width":376,"height":60},
		{"id":"b1e779e076ec0d1c","type":"text","text":"#### Recursive","x":3027,"y":2304,"width":250,"height":60},
		{"id":"a050f55a75371808","type":"text","text":"#### Iterative","x":3363,"y":2304,"width":250,"height":60},
		{"id":"6457b14062c44cb5","type":"text","text":"## [[Sets#Adding values from the array into the set during each iteration |Set]] [[Non-Linear Data Structure Runtime Comparison#^03b8d8 |Constant Time]]","x":2680,"y":1173,"width":455,"height":60},
		{"id":"7a53bfbf82b1e9fa","type":"file","file":"Algorithms & Data Structures/_Infographic/1D Array.png","x":3965,"y":1273,"width":212,"height":64},
		{"id":"5f7fd7ab64589a0e","type":"text","text":"# Searching","x":3208,"y":1803,"width":280,"height":48},
		{"id":"eaaef77060b38f9c","type":"text","text":"## [[Map]] [[Non-Linear Data Structure Runtime Comparison#^0b11f5 |Constant Time]]","x":2680,"y":1413,"width":455,"height":50},
		{"id":"b82dfa6f674e0796","x":-100,"y":3360,"width":842,"height":375,"type":"text","text":"Objects in JavaScript have constant time access for their properties but may vary based on the underlying hash map implementation used by the JavaScript engine.\n\nThe average-case time complexity for access, search, insertion, and deletion is typically considered O(1). This constant time complexity is achieved through the use of hash maps, which enable efficient property access and manipulation."},
		{"id":"a056bd51a912b4f2","x":5668,"y":1547,"width":652,"height":273,"type":"text","text":"When deciding whether to implement a queue or a stack using an array implementation is simpler and has benefits in terms of access action versus a linked list is a little bit more complex but increases search time complexity"}
	],
	"edges":[
		{"id":"96d016acd65b0fff","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"fd325d709a909001","toSide":"left","color":"2"},
		{"id":"6a2db3496971ebbf","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"c348f040e659dca0","toSide":"left","color":"2"},
		{"id":"72dd5c37d7eddc1f","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"fd325d709a909001","toSide":"left","color":"3"},
		{"id":"4d2d9e322e7415ed","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"41fac452e0ce903e","toSide":"left","color":"2"},
		{"id":"464693c7ba7a103a","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"9585a7d4f9b71583","toSide":"left","color":"2"},
		{"id":"c3a003b8c1e97d8f","fromNode":"9585a7d4f9b71583","fromSide":"top","toNode":"41fac452e0ce903e","toSide":"bottom","fromEnd":"arrow"},
		{"id":"87f237530997040c","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"6dcaf3843411ca15","toSide":"left","color":"2"},
		{"id":"05c54ce0ac1156f1","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"f181c6d2b5f3fc1f","toSide":"left","color":"2"},
		{"id":"66eb37e417c3f680","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"60eaa452b58a3486","toSide":"left","color":"2"},
		{"id":"b342f30c4ffb73d1","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"39385449ae56a059","toSide":"left","color":"2"},
		{"id":"aebc739848d095ae","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"5c61687d30c0def1","toSide":"left","color":"1"},
		{"id":"8ca3fc1fee255acf","fromNode":"5c61687d30c0def1","fromSide":"right","toNode":"86e2e275d6e21bee","toSide":"left"},
		{"id":"0a99b291ce36cd9b","fromNode":"5c61687d30c0def1","fromSide":"right","toNode":"a1ed74c48ddd021f","toSide":"left"},
		{"id":"cc4faf642a87e6b1","fromNode":"d2f1a8a1ed3d9acb","fromSide":"bottom","toNode":"da447d8b515a18d3","toSide":"right"},
		{"id":"9028196831a0615b","fromNode":"ca62e46b96c8640f","fromSide":"top","toNode":"da447d8b515a18d3","toSide":"right"},
		{"id":"4c16d7df21151989","fromNode":"ca62e46b96c8640f","fromSide":"top","toNode":"861854468e552a3b","toSide":"left"},
		{"id":"3d303fbc9c12671f","fromNode":"d2f1a8a1ed3d9acb","fromSide":"bottom","toNode":"861854468e552a3b","toSide":"left"},
		{"id":"a54ba6c8b93c1841","fromNode":"fd325d709a909001","fromSide":"right","toNode":"9f3e9abaa905df55","toSide":"left"},
		{"id":"a4a073bb57202636","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"b3998e713c9f6a67","toSide":"left","color":"2"},
		{"id":"148ab5c355639169","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"25329102cf33f0cf","toSide":"left","color":"3"},
		{"id":"6fea4b76f6a2a854","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"25329102cf33f0cf","toSide":"left","color":"2"},
		{"id":"ce83800b7069d782","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"b3998e713c9f6a67","toSide":"left","color":"3"},
		{"id":"43da954b4f272afd","fromNode":"e7da0726f1b38235","fromSide":"right","toNode":"d946efd45df7c067","toSide":"left","toEnd":"none"},
		{"id":"6b08f2864030029c","fromNode":"d2f1a8a1ed3d9acb","fromSide":"top","toNode":"5b67aab17a85a0fc","toSide":"bottom"},
		{"id":"9811427695f97f85","fromNode":"d2f1a8a1ed3d9acb","fromSide":"top","toNode":"a64c2aba2359509f","toSide":"bottom"},
		{"id":"4b0023996d952715","fromNode":"fd325d709a909001","fromSide":"top","toNode":"5c61687d30c0def1","toSide":"bottom","color":"5","label":"Potential Significance Depending on Problem  "},
		{"id":"45001f014f19d81f","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"5e34ed5a811ee8e5","toSide":"left","color":"1"},
		{"id":"585cea147cb992bc","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"f47025662be4d181","toSide":"left","color":"1"},
		{"id":"8a00e9c115d19919","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"eaa0306b2db490a2","toSide":"left","color":"1"},
		{"id":"6ac56388b9a2deba","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"ed17fc0c28eeb61a","toSide":"left","color":"3"},
		{"id":"6e9c9c4d325846a2","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"f13012b2a9ed16e5","toSide":"left","color":"3"},
		{"id":"daa1562c0d568c90","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"998645ac0a80e98a","toSide":"left","color":"3"},
		{"id":"701320432cbfebee","fromNode":"ed17fc0c28eeb61a","fromSide":"bottom","toNode":"a127ec6be2967a6f","toSide":"top"},
		{"id":"a96e6bf08e839e5f","fromNode":"ed17fc0c28eeb61a","fromSide":"bottom","toNode":"0f0845e7947dc225","toSide":"top"},
		{"id":"590b1b53ee4b67a2","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"79bc1f2ad745f2d0","toSide":"left","color":"1"},
		{"id":"9597e7e80ef30961","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"a77873bfa2b20c96","toSide":"left","color":"1"},
		{"id":"37ac27a00331eafc","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"82d39e439eab49f0","toSide":"left","color":"1"},
		{"id":"e0ac2faef49113ae","fromNode":"5f7fd7ab64589a0e","fromSide":"bottom","toNode":"89bca0c24d5f520d","toSide":"top"},
		{"id":"42cdff136f834d48","fromNode":"5f7fd7ab64589a0e","fromSide":"top","toNode":"56c29e39a438b323","toSide":"left"},
		{"id":"18e0096a27c1c043","fromNode":"5f7fd7ab64589a0e","fromSide":"top","toNode":"6457b14062c44cb5","toSide":"right"},
		{"id":"bb89e5db5c6020a9","fromNode":"5f7fd7ab64589a0e","fromSide":"bottom","toNode":"9da8c621c89f4817","toSide":"top"},
		{"id":"d3653bee3e8edeae","fromNode":"89bca0c24d5f520d","fromSide":"bottom","toNode":"b1e779e076ec0d1c","toSide":"top"},
		{"id":"5a09000924252dc5","fromNode":"9da8c621c89f4817","fromSide":"bottom","toNode":"a050f55a75371808","toSide":"top"},
		{"id":"761bc71c96c6583a","fromNode":"9da8c621c89f4817","fromSide":"left","toNode":"b1e779e076ec0d1c","toSide":"top"},
		{"id":"0b39cbee458a58dd","fromNode":"89bca0c24d5f520d","fromSide":"right","toNode":"a050f55a75371808","toSide":"top"},
		{"id":"a8515f3fd964e251","fromNode":"5f7fd7ab64589a0e","fromSide":"top","toNode":"eaaef77060b38f9c","toSide":"right"},
		{"id":"62bad39728000f3f","fromNode":"5f7fd7ab64589a0e","fromSide":"top","toNode":"1dddbf541fbab3f7","toSide":"left"},
		{"id":"7aabbb80a33c48cf","fromNode":"fd325d709a909001","fromSide":"right","toNode":"e7da0726f1b38235","toSide":"left"},
		{"id":"12d1d772b52adef6","fromNode":"5f7fd7ab64589a0e","fromSide":"top","toNode":"d8efb2641269bdc5","toSide":"left"},
		{"id":"71f593a67b5506ec","fromNode":"5f7fd7ab64589a0e","fromSide":"top","toNode":"cf17e6079bfd71ed","toSide":"left"},
		{"id":"0869f7a9c5122a92","fromNode":"d8efb2641269bdc5","fromSide":"right","toNode":"0676564d217769e0","toSide":"left"},
		{"id":"88ac94afecbc8b25","fromNode":"d8efb2641269bdc5","fromSide":"right","toNode":"cfdda6a33108ebd3","toSide":"left"},
		{"id":"d999c8155884996f","fromNode":"cf17e6079bfd71ed","fromSide":"right","toNode":"ba278a9ba0cac62b","toSide":"left"},
		{"id":"c44b0ea22bb58d23","fromNode":"cf17e6079bfd71ed","fromSide":"right","toNode":"f81ef82171007f38","toSide":"left"},
		{"id":"0565a2baadf2b15d","fromNode":"eaa0306b2db490a2","fromSide":"right","toNode":"0daf4dc22e491943","toSide":"left","color":"4","label":"Math"},
		{"id":"11cf44b4bcc2450d","fromNode":"a77873bfa2b20c96","fromSide":"right","toNode":"67bf976993c63b8e","toSide":"left","color":"4","label":"Math"},
		{"id":"ca094372fe56589e","fromNode":"79bc1f2ad745f2d0","fromSide":"right","toNode":"925f617c16d777c7","toSide":"left","color":"4","label":"Math"},
		{"id":"e7f700ea91256ffa","fromNode":"82d39e439eab49f0","fromSide":"right","toNode":"7807d68b78e73016","toSide":"left","color":"4","label":"Math"},
		{"id":"7e53dd8a382c6630","fromNode":"25329102cf33f0cf","fromSide":"right","toNode":"6457b14062c44cb5","toSide":"left","color":"5"},
		{"id":"934a8c26de21021d","fromNode":"478667fc12bcdd94","fromSide":"left","toNode":"9da8c621c89f4817","toSide":"right","toEnd":"none"},
		{"id":"f09860f4fe165c35","fromNode":"9da8c621c89f4817","fromSide":"right","toNode":"e481161a3cfe55e8","toSide":"top","toEnd":"none"},
		{"id":"d1f56afc634e456e","fromNode":"9da8c621c89f4817","fromSide":"right","toNode":"c539150a20f457ba","toSide":"top","toEnd":"none"},
		{"id":"f8818546360d0ee2","fromNode":"d0c92a99295ec595","fromSide":"right","toNode":"39c0b7eb30f870f6","toSide":"left","color":"3"},
		{"id":"a22b3d2b778a5af3","fromNode":"2e8b93c2e6c70435","fromSide":"top","toNode":"9388666a2e46910e","toSide":"left"},
		{"id":"28f9bb70561b84e3","fromNode":"2e8b93c2e6c70435","fromSide":"top","toNode":"8e877835b7fc6dca","toSide":"right"},
		{"id":"1d9d2797efb407d7","fromNode":"2e8b93c2e6c70435","fromSide":"left","toNode":"39c0b7eb30f870f6","toSide":"right"},
		{"id":"d2467ddfff37ad21","fromNode":"9da8c621c89f4817","fromSide":"right","toNode":"239591fa02eeff5c","toSide":"left"},
		{"id":"a143a9ee9cb9eda3","fromNode":"b0d5eb91409aab19","fromSide":"top","toNode":"56c29e39a438b323","toSide":"bottom","color":"6","label":"Push & Pop"},
		{"id":"83dda269aa1ffe17","fromNode":"bc929a986562ba89","fromSide":"top","toNode":"56c29e39a438b323","toSide":"top","color":"3","label":"Push & Shift"},
		{"id":"05a0b119dfdcbb11","fromNode":"bc929a986562ba89","fromSide":"bottom","toNode":"1dddbf541fbab3f7","toSide":"top","color":"3"},
		{"id":"c6e0eb1e25c97959","fromNode":"b0d5eb91409aab19","fromSide":"bottom","toNode":"1dddbf541fbab3f7","toSide":"bottom","color":"6"},
		{"id":"25be32479b6b4005","fromNode":"56c29e39a438b323","fromSide":"right","toNode":"6dae9f36d2eff64c","toSide":"left","color":"3"},
		{"id":"b5871b13641ec772","fromNode":"1dddbf541fbab3f7","fromSide":"right","toNode":"02ce8d9440662a5c","toSide":"left"},
		{"id":"52e942922958415f","fromNode":"998645ac0a80e98a","fromSide":"right","toNode":"9da8c621c89f4817","toSide":"left","color":"3","label":"If rotated"},
		{"id":"22b50b76f680bea0","fromNode":"f13012b2a9ed16e5","fromSide":"right","toNode":"d0c92a99295ec595","toSide":"left","color":"3"},
		{"id":"ac069740fd5da067","fromNode":"f87a98447aa26838","fromSide":"left","toNode":"16e92aeedfed376e","toSide":"right"},
		{"id":"711c311fb536c0d0","fromNode":"f87a98447aa26838","fromSide":"right","toNode":"95dce9009e359e66","toSide":"left"},
		{"id":"e2fbdf86c885cc4d","fromNode":"c348f040e659dca0","fromSide":"right","toNode":"d11472b8e9469b92","toSide":"left","color":"2"},
		{"id":"10826ddfca0876fd","fromNode":"0d697435e2e19a71","fromSide":"bottom","toNode":"6076563a4e4481d8","toSide":"top","color":"3"},
		{"id":"0db3f8034da650a4","fromNode":"d11472b8e9469b92","fromSide":"top","toNode":"0d697435e2e19a71","toSide":"right","color":"3"},
		{"id":"5901e26e440858d1","fromNode":"d11472b8e9469b92","fromSide":"top","toNode":"6076563a4e4481d8","toSide":"bottom","color":"3"},
		{"id":"ee1cc121e480192f","fromNode":"bc929a986562ba89","fromSide":"left","toNode":"16e92aeedfed376e","toSide":"top","color":"3"},
		{"id":"8ccba85dd6492708","fromNode":"bc929a986562ba89","fromSide":"right","toNode":"95dce9009e359e66","toSide":"top","color":"3"},
		{"id":"11b117ea6b121786","fromNode":"b0d5eb91409aab19","fromSide":"left","toNode":"16e92aeedfed376e","toSide":"top","color":"6"},
		{"id":"4559502555142804","fromNode":"b0d5eb91409aab19","fromSide":"right","toNode":"95dce9009e359e66","toSide":"top","color":"6"},
		{"id":"f00292bd71401eef","fromNode":"56c29e39a438b323","fromSide":"right","toNode":"4317ae874cc61af1","toSide":"left","color":"3"},
		{"id":"f10016b55a617373","fromNode":"6dae9f36d2eff64c","fromSide":"right","toNode":"84a011f6ec72751e","toSide":"top","color":"3"},
		{"id":"18e805e0b5192f6a","fromNode":"1dddbf541fbab3f7","fromSide":"right","toNode":"3f2bd05759706b72","toSide":"left"},
		{"id":"b4e8b99c4a49fc84","fromNode":"82d39e439eab49f0","fromSide":"right","toNode":"173f890c3551a66c","toSide":"left","color":"1","label":"Number"},
		{"id":"a020b377eae04d94","fromNode":"d2f1a8a1ed3d9acb","fromSide":"right","toNode":"ea00ba2f6fe54da5","toSide":"left","color":"1"},
		{"id":"100a1f37b96c4b80","fromNode":"ea00ba2f6fe54da5","fromSide":"right","toNode":"62208d542ae9625c","toSide":"left","color":"1","label":"Number"},
		{"id":"42b50c05f79d1900","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"ea00ba2f6fe54da5","toSide":"left","color":"2"},
		{"id":"626fc8046e4c9c94","fromNode":"82d39e439eab49f0","fromSide":"bottom","toNode":"ea00ba2f6fe54da5","toSide":"top"},
		{"id":"6d63ce0e517c1484","fromNode":"ea00ba2f6fe54da5","fromSide":"right","toNode":"46be2215c78bcc7c","toSide":"left","color":"1","label":"Number"},
		{"id":"4aee542b5b1c3722","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"621d34172855a93f","toSide":"left","color":"2"},
		{"id":"90e69cb5bd755c0c","fromNode":"621d34172855a93f","fromSide":"right","toNode":"8d6bd4958800f7c0","toSide":"left","color":"2"},
		{"id":"e408e5f6e2672bdc","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"83530d618210f901","toSide":"left","color":"2"},
		{"id":"89721fbc1d6c7bf7","fromNode":"83530d618210f901","fromSide":"right","toNode":"ecfc42ef14105761","toSide":"left","color":"2"},
		{"id":"bb837df87a1f6911","fromNode":"83530d618210f901","fromSide":"right","toNode":"f8e79c60c60d7ec1","toSide":"left","color":"2"},
		{"id":"baddd83c04cc80eb","fromNode":"ca62e46b96c8640f","fromSide":"right","toNode":"d12a903cbb8a0c13","toSide":"left","color":"2"},
		{"id":"d8a338ad709a0291","fromNode":"ac82dd968a6ed0c1","fromSide":"right","toNode":"765df1a3f9a07eac","toSide":"left","color":"2"},
		{"id":"ec0c9a423b85b6b7","fromNode":"ac82dd968a6ed0c1","fromSide":"right","toNode":"0df1cc4cc22c8a75","toSide":"left","color":"2"},
		{"id":"c609508a253b2142","fromNode":"ac82dd968a6ed0c1","fromSide":"right","toNode":"c00306235821983c","toSide":"left","color":"2"},
		{"id":"19f755c8060f18c0","fromNode":"f181c6d2b5f3fc1f","fromSide":"right","toNode":"dc949d24f4fcb3b7","toSide":"left","color":"2"},
		{"id":"d496f96ae87bac48","fromNode":"6dcaf3843411ca15","fromSide":"right","toNode":"7986a822ebd64a29","toSide":"left","color":"2"},
		{"id":"88da60375a721437","fromNode":"6dcaf3843411ca15","fromSide":"right","toNode":"ca811a1394c0f30a","toSide":"left","color":"2"},
		{"id":"36e0707d6a7d441c","fromNode":"7986a822ebd64a29","fromSide":"right","toNode":"492765133b4a6750","toSide":"left","color":"2"},
		{"id":"157635a931c10153","fromNode":"ca811a1394c0f30a","fromSide":"right","toNode":"492765133b4a6750","toSide":"left","color":"2"},
		{"id":"70dad5cfa3bf7f15","fromNode":"492765133b4a6750","fromSide":"right","toNode":"d11472b8e9469b92","toSide":"bottom","color":"2"},
		{"id":"ed633b30146407e7","fromNode":"d12a903cbb8a0c13","fromSide":"right","toNode":"ac82dd968a6ed0c1","toSide":"left","color":"2"},
		{"id":"d02337c09eb810c3","fromNode":"f181c6d2b5f3fc1f","fromSide":"right","toNode":"9597dc0a2f469337","toSide":"left","color":"2"},
		{"id":"33cd2c1153638a49","fromNode":"9597dc0a2f469337","fromSide":"right","toNode":"d11472b8e9469b92","toSide":"bottom","color":"2"},
		{"id":"d80841f19a3d1265","fromNode":"dc949d24f4fcb3b7","fromSide":"right","toNode":"d11472b8e9469b92","toSide":"bottom","color":"2"},
		{"id":"8e7f51314a12696c","fromNode":"ac82dd968a6ed0c1","fromSide":"right","toNode":"8a0f98a590ca8343","toSide":"left","color":"2"},
		{"id":"65cb939c3db3d6bf","fromNode":"ac82dd968a6ed0c1","fromSide":"right","toNode":"ddb81fc53ec02b34","toSide":"left","color":"2"},
		{"id":"1c99adca58eedfbb","fromNode":"ac82dd968a6ed0c1","fromSide":"right","toNode":"a464fdccbbed41f5","toSide":"left","color":"2"},
		{"id":"198d17817655b421","fromNode":"0df1cc4cc22c8a75","fromSide":"right","toNode":"5d351a034933973c","toSide":"left"},
		{"id":"120157a4ec149be9","fromNode":"c00306235821983c","fromSide":"right","toNode":"5d351a034933973c","toSide":"left"},
		{"id":"d0f86ddd6527517b","fromNode":"f8e79c60c60d7ec1","fromSide":"right","toNode":"d11472b8e9469b92","toSide":"bottom","color":"2"},
		{"id":"3f0a2c9e591c4512","fromNode":"41fac452e0ce903e","fromSide":"right","toNode":"f8e79c60c60d7ec1","toSide":"left","label":"relates"},
		{"id":"e6d47c1ed35dbd9e","fromNode":"9585a7d4f9b71583","fromSide":"right","toNode":"f8e79c60c60d7ec1","toSide":"left","label":"relates"},
		{"id":"7b26a8b74ef60ebd","fromNode":"ecfc42ef14105761","fromSide":"bottom","toNode":"fdcf7eb070026dda","toSide":"top","toEnd":"none"},
		{"id":"980212a6b84428a3","fromNode":"41fac452e0ce903e","fromSide":"right","toNode":"ecfc42ef14105761","toSide":"left","label":"relates"},
		{"id":"cf1b9f91ec7a0fb3","fromNode":"a73b83869550d3ce","fromSide":"bottom","toNode":"0d697435e2e19a71","toSide":"top","color":"3"},
		{"id":"bc1ced3bcdcc9386","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"d820a9b2509a4952","toSide":"left","color":"#ffdd00"},
		{"id":"32d4b5a37f2d0fff","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"9500e2ffeb2896d0","toSide":"left","color":"#ffdd00"},
		{"id":"bf977a5d35b6f195","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"7873e05630bb9cea","toSide":"left","color":"#ffdd00"},
		{"id":"535e07f117510fb1","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"3801d47c16a9e09e","toSide":"left","color":"#ffdd00"},
		{"id":"421c82059a084b5c","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"a73b83869550d3ce","toSide":"left","color":"#ffdd00"},
		{"id":"ac2522d256ce3f09","fromNode":"9500e2ffeb2896d0","fromSide":"right","toNode":"cfdda6a33108ebd3","toSide":"left","color":"#bbff00"},
		{"id":"456238b943a5ea63","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"b4663b5dadd09058","toSide":"left","color":"#ffdd00"},
		{"id":"8bbbdc459d9d15ea","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"0d697435e2e19a71","toSide":"left","color":"#ffdd00"},
		{"id":"576a08af6372da42","fromNode":"fb939de4f80d9504","fromSide":"right","toNode":"ae905fa1ddc28d39","toSide":"left","color":"#00fa53"},
		{"id":"fd2636c466846e6d","fromNode":"fb939de4f80d9504","fromSide":"right","toNode":"514c365be78e166b","toSide":"left","color":"#00fa53"},
		{"id":"eaa23a4e57cc9d00","fromNode":"fb939de4f80d9504","fromSide":"right","toNode":"0f0c1c22c4017a9f","toSide":"left","color":"#00fa53"},
		{"id":"7aeb665ea79039e7","fromNode":"fb939de4f80d9504","fromSide":"right","toNode":"3972ec4da8c62a10","toSide":"left","color":"#00fa53"},
		{"id":"60f1cbe5b60eac30","fromNode":"fb939de4f80d9504","fromSide":"right","toNode":"86007369e8eadaa4","toSide":"left","color":"#00fa53"},
		{"id":"ff97ce37180d4f1c","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"6af0983b691d897a","toSide":"left","color":"#ffdd00"},
		{"id":"c742abd424564d39","fromNode":"d7df8a358d5c2c76","fromSide":"right","toNode":"4df07f5ff93de20c","toSide":"left","color":"#ffdd00"},
		{"id":"f624ce8d93b26acf","fromNode":"e01e6d05f8acb51f","fromSide":"top","toNode":"6f09c0617fe25487","toSide":"left"},
		{"id":"e4b6c85b43df8dde","fromNode":"d11472b8e9469b92","fromSide":"right","toNode":"e01e6d05f8acb51f","toSide":"bottom","label":"generate alphabet \nafter split of fromCharCode"},
		{"id":"65faafe86e06a066","fromNode":"16e92aeedfed376e","fromSide":"bottom","toNode":"3c3da4664bad290d","toSide":"top","label":"Constant Time O(1) "},
		{"id":"1fc5478205dc81b1","fromNode":"3c3da4664bad290d","fromSide":"bottom","toNode":"ccdb941ed8083152","toSide":"top","toEnd":"none"},
		{"id":"d4e08546b9327e15","fromNode":"16e92aeedfed376e","fromSide":"bottom","toNode":"24a75ab08f8d1ef2","toSide":"top"},
		{"id":"3da2714e56e22f0a","fromNode":"16e92aeedfed376e","fromSide":"bottom","toNode":"d618243906e0f413","toSide":"top"},
		{"id":"de7844772c5c3643","fromNode":"95dce9009e359e66","fromSide":"bottom","toNode":"53ecdc5c8efbe430","toSide":"top"},
		{"id":"79d85168941e0d96","fromNode":"95dce9009e359e66","fromSide":"bottom","toNode":"4a27c025f90f6990","toSide":"top"},
		{"id":"5f33988ebbf261cc","fromNode":"5f7fd7ab64589a0e","fromSide":"top","toNode":"48d987bb85b70c5e","toSide":"right"},
		{"id":"71eefc4637fb45be","fromNode":"56c29e39a438b323","fromSide":"top","toNode":"b21a8f41ba9f5449","toSide":"bottom","toEnd":"none"},
		{"id":"4eb2122b961f6c6c","fromNode":"eaaef77060b38f9c","fromSide":"top","toNode":"b21a8f41ba9f5449","toSide":"bottom"},
		{"id":"0ea573c5b1ad15a5","fromNode":"fb939de4f80d9504","fromSide":"top","toNode":"b82dfa6f674e0796","toSide":"left","toEnd":"none"}
	]
}